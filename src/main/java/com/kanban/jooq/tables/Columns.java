/*
 * This file is generated by jOOQ.
 */
package com.kanban.jooq.tables;


import com.kanban.jooq.Keys;
import com.kanban.jooq.Public;
import com.kanban.jooq.tables.records.ColumnsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Columns extends TableImpl<ColumnsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.columns</code>
     */
    public static final Columns COLUMNS = new Columns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ColumnsRecord> getRecordType() {
        return ColumnsRecord.class;
    }

    /**
     * The column <code>public.columns.id</code>.
     */
    public final TableField<ColumnsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.columns.name</code>.
     */
    public final TableField<ColumnsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.columns.position</code>.
     */
    public final TableField<ColumnsRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.columns.board_id</code>.
     */
    public final TableField<ColumnsRecord, UUID> BOARD_ID = createField(DSL.name("board_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.columns.color</code>.
     */
    public final TableField<ColumnsRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.CLOB, this, "");

    private Columns(Name alias, Table<ColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Columns(Name alias, Table<ColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.columns</code> table reference
     */
    public Columns(String alias) {
        this(DSL.name(alias), COLUMNS);
    }

    /**
     * Create an aliased <code>public.columns</code> table reference
     */
    public Columns(Name alias) {
        this(alias, COLUMNS);
    }

    /**
     * Create a <code>public.columns</code> table reference
     */
    public Columns() {
        this(DSL.name("columns"), null);
    }

    public <O extends Record> Columns(Table<O> child, ForeignKey<O, ColumnsRecord> key) {
        super(child, key, COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ColumnsRecord> getPrimaryKey() {
        return Keys.COLUMNS_PKEY;
    }

    @Override
    public List<UniqueKey<ColumnsRecord>> getKeys() {
        return Arrays.<UniqueKey<ColumnsRecord>>asList(Keys.COLUMNS_PKEY);
    }

    @Override
    public List<ForeignKey<ColumnsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ColumnsRecord, ?>>asList(Keys.COLUMNS__FKIYLG7OIWDT1TNOFF75RKBIHC0);
    }

    public Boards boards() {
        return new Boards(this, Keys.COLUMNS__FKIYLG7OIWDT1TNOFF75RKBIHC0);
    }

    @Override
    public Columns as(String alias) {
        return new Columns(DSL.name(alias), this);
    }

    @Override
    public Columns as(Name alias) {
        return new Columns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Columns rename(String name) {
        return new Columns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Columns rename(Name name) {
        return new Columns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, Integer, UUID, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
